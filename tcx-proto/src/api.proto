syntax = "proto3";
package api;

import "google/protobuf/any.proto";

// Action Wrapper
// There is a `call_tcx_api` method in tcx which act as a endpoint like RPC. It accepts a `TcxAction` param which method field is
// the real action and param field is the real param of that method.
// When an error occurred, the `call_tcx_api` will return a `Response` which isSuccess field be false and error field is the reason
// which cause the error.
message TcxAction {
    string method = 1;
    google.protobuf.Any param = 2;
}

// A common response when error occurred.
message Response {
    bool isSuccess = 1;
    string error = 2;
}

/// Initialization

// FUNCTION: init_token_core_x(InitTokenCoreXParam)
//
// initialize tcx by passing keystore folder and xpub encryption params
message InitTokenCoreXParam {
    string fileDir = 1;
    string xpubCommonKey = 2;
    string xpubCommonIv = 3;
    bool isDebug = 4;
}

/// Hd Store

// FUNCTION: hd_store_create(HdStoreCreateParam): WalletResult
//
// create a new hd keystore
//message HdStoreCreateParam {
//    string password = 1;
//    string passwordHint = 2;
//    string name = 3;
//}
//
//message WalletResult {
//    string id = 1;
//    string name = 2;
//    string source = 3;
//    repeated AccountResponse accounts = 4;
//    int64 createdAt = 5;
//}
//
//// FUNCTION: hd_store_import(HdStoreImportParam): WalletResult
////
//// create a new hd keystore by mnemonic
//message HdStoreImportParam {
//    string mnemonic = 1;
//    string password = 2;
//    string source = 3;
//    string name = 4;
//    string passwordHint = 5;
//    bool overwrite = 6;
//}
//
//// FUNCTION: hd_store_derive(HdStoreDeriveParam): AccountsResponse
////
//// derive new accounts from a hd keystore
//message KeystoreCommonDeriveParam {
//    string id = 1;
//    string password = 2;
//    message Derivation {
//        string chainType = 1;
//        string path = 2;
//        string network = 3;
//        string segWit = 4;
//        string chainId = 5;
//    }
//    repeated Derivation derivations= 3;
//}
//
//message AccountResponse {
//    string chainType = 1;
//    string address = 2;
//    string path = 3;
//    string extendedXpubKey = 4;
//}
//
//message AccountsResponse {
//    repeated AccountResponse accounts = 1;
//}
//
//message KeystoreCommonExportParam {
//    string id = 1;
//    string password = 2;
//    KeyType type = 3;
//    string value = 4;
//}
//
//
//// FUNCTION: hd_store_export(KeystoreCommonExportResult): KeystoreCommonExistsResult
////
//// export the mnemonic from a hd keystore
//message KeystoreCommonExportResult {
//    string id = 1;
//    KeyType type = 2;
//    string value = 3;
//}
//
//// only support two types
//enum KeyType {
//    MNEMONIC = 0;
//    PRIVATE_KEY = 1;
//}
//
///// Private Key Store
//
//// FUNCTION: private_key_store_import(PrivateKeyStoreImportParam): WalletResult
////
//// create a new private key keystore by a private key
//message PrivateKeyStoreImportParam {
//    string privateKey = 1;
//    string password = 2;
//    bool overwrite = 3;
//}
//
//// Deprecated use ExportPrivateKeyParam instead
//// FUNCTION: private_key_store_export(PrivateKeyStoreExportParam): KeystoreCommonExportResult
////
//// export the private key from a private key keystore
//message PrivateKeyStoreExportParam {
//    string id = 1;
//    string password = 2;
//    string chainType = 3;
//    string network = 4;
//}
//
//// FUNCTION: export_private_key(ExportPrivateKeyParam): KeystoreCommonExportResult
////
//// export the private key from a private key keystore or a hd keystore
message ExportPrivateKeyParam {
    string id = 1;
    string password = 2;
    string chainType = 3;
    string network = 4;
    string mainAddress = 5;
    string path = 6;
}
//
///// Keystore Common
//
//// FUNCTION: keystore_common_verify(WalletKeyParam) -> Response
////
//// verify the password of the keystore
message WalletKeyParam {
    string id = 1;
    string password = 2;
}